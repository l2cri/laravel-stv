<?phpnamespace App\Http\Controllers;use App\DataTables\CommentsProductsDataTable;use App\Repo\Comment\CommentInterface;use App\Services\Form\Comment\CommentForm;use Illuminate\Http\Request;use App\Http\Requests;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Redirect;class CommentController extends Controller{    protected $comment;    protected $input;    protected $id;    protected $commentForm;    function __construct(CommentInterface $comment, CommentForm $commentForm){        $this->comment = $comment;        $this->commentForm = $commentForm;    }    /**     * Store a newly created resource in storage.     *     * @param  \Illuminate\Http\Request  $request     * @return \Illuminate\Http\Response     */    public function storeProduct(Request $request,$id)    {        //        $errors = '';        $request->merge(array('id' => $id));        $input = removeEmptyValues($request->all());        if ($this->commentForm->save($input) ){            $status = 'success';        } else {            $status = 'error';            $errors = $this->commentForm->errors();        }        $comments = $this->comment->byProductId($id);        $routeName = 'commentProduct';        return view('comments.list',compact('comments','id','status','errors','routeName'));    }    public function storeSupplier(Request $request,$id)    {        $errors = '';        $request->merge(array('id' => $id));        $input = removeEmptyValues($request->all());        if ($this->commentForm->save($input) ){            $status = 'success';        } else {            $status = 'error';            $errors = $this->commentForm->errors();        }        $comments = $this->comment->bySupplierId($id);        $routeName = 'commentSupplier';        return view('comments.list',compact('comments','id','status','errors','routeName'));    }    public function paginatorProduct($id){        $comments = $this->comment->byProductId($id);        $routeName = 'commentProduct';        return view('comments.list', compact('comments','id','routeName'));    }    public function paginatorSupplier($id){        $comments = $this->comment->bySupplierId($id);        $routeName = 'commentSupplier';        return view('comments.list', compact('comments','id','routeName'));    }    /**     * Store a newly created resource in storage with redirect.     *     * @param  \Illuminate\Http\Request  $request     * @return \Illuminate\Http\Response     */    public function storeWithRedirect(Request $request,$id)    {        //        $request->merge(array('id' => $id));        $input = removeEmptyValues($request->all());        if ($this->commentForm->save($input) ){            return Redirect::to( route('product.page',['id'=>$id]) )->with('status', 'success');        } else {            return Redirect::to( route('product.page',['id'=>$id]) )->withInput()                ->withErrors( $this->commentForm->errors() )                ->with('status', 'error');        }    }    public function getBySupplier(CommentsProductsDataTable $dataTable){        //$comments = $this->comment->bySupplier();        return $dataTable->render('panel.supplier.comments.datatablescomments');    }    public function delete($id){        $this->comment->delete($id);        return redirect()->back();    }    public function toggle($id){        $this->commentForm->toggle($id);        return redirect()->back();    }}